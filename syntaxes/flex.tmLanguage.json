{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Flex",
    "scopeName": "source.flex",
    "fileTypes": ["lx", "flex", "fx"],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#brackets"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#imports"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.flex",
                    "begin": "/\\*|'''",
                    "end": "\\*/|'''",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.flex"
                        }
                    }
                },
                {
                    "name": "comment.line.double-slash.flex",
                    "match": "(//|#).*$",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.flex"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.flex",
                    "match": "\\b(if|cond|lw|elif|aw|else|otherwise|gher)\\b"
                },
                {
                    "name": "keyword.control.loop.flex",
                    "match": "\\b(while|loop|talama|talma|tlma|for|karr|l7d)\\b"
                },
                {
                    "name": "keyword.control.flow.flex",
                    "match": "\\b(return|rg3|break|stop|w2f)\\b"
                },
                {
                    "name": "keyword.operator.logical.flex",
                    "match": "\\b(and|or|not)\\b"
                },
                {
                    "name": "constant.language.boolean.flex",
                    "match": "\\b(true|false|9a7|53ta)\\b"
                },
                {
                    "name": "keyword.other.io.flex",
                    "match": "\\b(etb3|out|output|print|printf|cout|scan|read|input|da5l)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.flex",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.flex",
                    "match": "\\\\."
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.numeric.flex",
                    "match": "\\b\\d+(\\.\\d+)?\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.comparison.flex",
                    "match": "(==|!=|>=|=>|<=|=<|>|<)"
                },
                {
                    "name": "keyword.operator.assignment.flex",
                    "match": "="
                },
                {
                    "name": "keyword.operator.arithmetic.flex",
                    "match": "(\\+\\+|--|\\+|-|\\*|/)"
                }
            ]
        },
        "brackets": {
            "patterns": [
                {
                    "name": "punctuation.section.brackets.flex",
                    "match": "[\\[\\]\\(\\)\\{\\}]"
                },
                {
                    "name": "punctuation.separator.flex",
                    "match": "[,;]"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.type.flex",
                    "match": "\\b(int|rakm|float|3jfa|kasr|bool|mnt5k|so2al|string|7arf|klma|list|dorg)\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "entity.name.function.flex",
                    "match": "\\b(fun|sndo2|sando2|fn|function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "storage.type.function.flex"
                        },
                        "2": {
                            "name": "entity.name.function.flex"
                        }
                    }
                },
                {
                    "name": "support.function.list.flex",
                    "match": "\\.(?:append|push|pop|remove|delete)\\b"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "name": "keyword.control.import.flex",
                    "match": "\\b(geep|geeb|import)\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.flex",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    }
}

