{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Flex",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#function_declarations"
        },
        {
            "include": "#variable_declarations"
        },
        {
            "include": "#operators"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.flex",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.flex",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.flex"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.flex",
                    "match": "\\b(if|else|elif|cond|for|while|return|rg3|break|continue|import|geeb)\\b"
                },
                {
                    "name": "storage.type.flex",
                    "match": "\\b(int|rakm|float|kasr|string|nass|bool|so2al|list|dorg)\\b"
                },
                {
                    "name": "constant.language.flex",
                    "match": "\\b(true|false|null|nil)\\b"
                },
                {
                    "name": "support.function.flex",
                    "match": "\\b(print|etb3|input|da5l)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.flex",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.flex",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.integer.flex",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.float.flex",
                    "match": "\\b[0-9]+\\.[0-9]+\\b"
                }
            ]
        },
        "function_declarations": {
            "name": "meta.function.flex",
            "begin": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
            "beginCaptures": {
                "1": {
                    "name": "storage.type.function.flex"
                },
                "2": {
                    "name": "entity.name.function.flex"
                }
            },
            "end": "\\)",
            "patterns": [
                {
                    "name": "variable.parameter.flex",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                },
                {
                    "name": "storage.type.flex",
                    "match": "\\b(int|rakm|float|kasr|string|nass|bool|so2al|list|dorg)\\b"
                }
            ]
        },
        "variable_declarations": {
            "patterns": [
                {
                    "name": "meta.variable.declaration.flex",
                    "match": "\\b(int|rakm|float|kasr|string|nass|bool|so2al|list|dorg)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "1": {
                            "name": "storage.type.flex"
                        },
                        "2": {
                            "name": "variable.other.flex"
                        }
                    }
                },
                {
                    "name": "meta.variable.declaration.commented.flex",
                    "match": "//\\s*(int|rakm|float|kasr|string|nass|bool|so2al|list|dorg)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b",
                    "captures": {
                        "0": {
                            "name": "comment.line.double-slash.flex"
                        },
                        "1": {
                            "name": "storage.type.flex"
                        },
                        "2": {
                            "name": "variable.other.flex"
                        }
                    }
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.arithmetic.flex",
                    "match": "[+\\-*/%]"
                },
                {
                    "name": "keyword.operator.comparison.flex",
                    "match": "==|!=|<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.logical.flex",
                    "match": "&&|\\|\\||!"
                },
                {
                    "name": "keyword.operator.assignment.flex",
                    "match": "="
                }
            ]
        }
    },
    "scopeName": "source.flex"
}
